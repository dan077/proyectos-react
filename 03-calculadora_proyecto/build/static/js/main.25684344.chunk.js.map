{"version":3,"sources":["helpers/operaciones.js","components/Calculadora.jsx","components/NumberInput.jsx","components/Resultado.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Operaciones","numeros","setNumeros","operaciones","handleChange","e","target","name","parseFloat","value","Calculadora","useState","numero1","numero2","Object","entries","map","array","key","expresion","calculo","eval","operacion","NumberInput","onChange","type","Resultado","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.25684344.chunk.js","sourcesContent":["export const Operaciones = (numeros,setNumeros)=>{\r\n    const operaciones = {\r\n            \"suma\":\"+\",\r\n            \"resta\":\"-\",\r\n            \"multiplicacion\":\"*\",\r\n            \"division\":\"/\",\r\n        };\r\n\r\n        //recorreor json.\r\n    const handleChange = (e)=>{\r\n        setNumeros(\r\n            {\r\n                ...numeros,\r\n                [e.target.name] :parseFloat(e.target.value)\r\n            }\r\n        )\r\n    } \r\n    \r\n    return {operaciones,handleChange}\r\n}","import {useState} from 'react'\r\nimport { Operaciones } from '../helpers/operaciones';\r\nimport NumberInput from './NumberInput';\r\nimport Resultado from './Resultado';\r\n\r\nconst Calculadora = () => {\r\n\r\n    const [numeros, setNumeros] = useState({numero1:0,numero2:0})\r\n    /*\r\n    const operaciones = {\r\n        \"suma\":\"+\",\r\n        \"resta\":\"-\",\r\n        \"multiplicacion\":\"*\",\r\n        \"division\":\"/\",\r\n    };*/\r\n    const {operaciones} = Operaciones(numeros,setNumeros)\r\n    return (\r\n        <div>\r\n            <NumberInput setNumeros = {setNumeros} numeros = {numeros}/>\r\n\r\n            {\r\n            Object.entries(operaciones).map( \r\n                (array) => {\r\n                    let key = array[0];\r\n                    let value = array[1];\r\n                    let expresion = `(${numeros.numero1})  ${value}  (${numeros.numero2})`;\r\n                    //console.log(expresion)\r\n                    let calculo = eval(expresion)\r\n                    return <Resultado operacion={key} calculo = {calculo}/>\r\n                })\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculadora\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Operaciones } from '../helpers/operaciones';\r\n\r\nconst NumberInput = ({setNumeros,numeros}) => {\r\n    \r\n    const {numero1,numero2} = numeros;\r\n    const {handleChange} = Operaciones(numeros,setNumeros)\r\n\r\n    return (\r\n        <>\r\n            <label>\r\n                numero1:\r\n                <input name = \"numero1\" value={numero1} onChange={handleChange}  type=\"number\" />\r\n            </label>\r\n            <label>\r\n                numero2:\r\n                <input name = \"numero2\" value={numero2} onChange={handleChange} type=\"number\" />\r\n            </label>\r\n        </>\r\n    )\r\n}\r\n\r\nNumberInput.propTypes = {\r\nsetNumeros: PropTypes.func,\r\nnumeros: PropTypes.object,\r\n}\r\n\r\nexport default NumberInput;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Resultado = ({operacion,calculo}) => {\r\n    return (\r\n        <>\r\n            <br />\r\n            <span>{operacion}: {calculo}</span>\r\n        </>\r\n    )\r\n}\r\n\r\nResultado.propTypes = {\r\noperacion: PropTypes.string,\r\ncalculo: PropTypes.number,\r\n}\r\n\r\nexport default Resultado\r\n","import React from 'react'\nimport Calculadora from './components/Calculadora';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Calculadora - PWA</h1>\n      <hr/>\n      <Calculadora/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}